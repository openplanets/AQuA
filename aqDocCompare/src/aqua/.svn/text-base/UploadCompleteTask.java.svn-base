/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is BEAM Web Deposit.
 *
 * The Initial Developer of the Original Code is
 * Peter Cliff [pete@pixelatedpete.co.uk].
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package uk.ac.ox.bodleian.beam.deposit.postprocessing;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimerTask;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.task.TaskExecutor;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSenderImpl;

import uk.ac.ox.bodleian.beam.deposit.model.ReceiptEmail;
import uk.ac.ox.bodleian.beam.deposit.model.UploadProperties;
import uk.ac.ox.bodleian.beam.deposit.settings.ISettingsDao;
import uk.ac.ox.bodleian.beam.deposit.util.BeamDepositUtil;

public class UploadCompleteTask extends TimerTask {
	private UploadCompleteQueue uploadCompleteQueue;

	// These are autowired via the setters below
	private TaskExecutor taskExecutor;
	private MailSender mailSender;
	private ISettingsDao settingsDao;

	@Autowired @Value("${beamdep.upload.dir}")
	private String uploadRoot;

	@Autowired @Value("${beamdep.upload.data.dir}")
	private String dataPath;

	@SuppressWarnings("unused") // we might want it one day!
	@Autowired @Value("${beamdep.upload.meta.dir}")
	private String metaPath;

	private File uploadDir;

	private final Log logger = LogFactory.getLog(this.getClass());

	public UploadCompleteTask() {

	}

	@Override
	public void run() {
		String id = uploadCompleteQueue.pullJob();
		if (id == null) {
			logger.debug("UPLOAD COMPLETE RUN - nothing to do");
		} else {
			logger.debug("UPLOAD COMPLETE RUN - " + id);
			doUploadComplete(id);
		}
	}

	private void doUploadComplete(String id) {
		uploadDir = new File(uploadRoot + "/" + id);
		logger.debug("UploadCompleteProcessing on "+uploadDir.getAbsolutePath());

		UploadProperties up = new UploadProperties(uploadDir);

		// Setup email for user & send
		ReceiptEmail re = new ReceiptEmail();
		re.setTo(up.getProperty(UploadProperties.EMAIL));
		re.setFrom(settingsDao.getSender());
		re.setManifest(createChecksumReceipt(up.getProperty(UploadProperties.NAME), up.getProperty(UploadProperties.SESHID)));
		re.setTimestamp(now());
		re.setSubject(settingsDao.getReceiptSubject());
		re.setErrors("not checked");
		re.setDepositEmail(re.getTo());
		re.setName(up.getProperty(UploadProperties.NAME));
		re.setId(up.getProperty(UploadProperties.SESHID));
		re.setTemplate(settingsDao.getTemplate());

		if (BeamDepositUtil.isValidEmailAddress(re.getTo())) {
			logger.info("SENDING MAIL - receipt "+re.getTo());
			sendEmail(re);
		} else {
			logger.info("NOT SENDING MAIL - invalid email address "+re.getTo());
		}

		// ammend for send to archivist & send
		re.setTo(settingsDao.getNoticeTo());
		re.setSubject(settingsDao.getNoticeSubject());

		if (BeamDepositUtil.isValidEmailAddress(re.getTo())) {
			logger.info("SENDING MAIL - notice "+re.getTo());
			sendEmail(re);
		} else {
			logger.info("NOT SENDING NOTICE MAIL - invalid email address "+re.getTo());
		}
	}

	private void sendEmail(ReceiptEmail re) {
		SimpleMailMessage emsg = new SimpleMailMessage();
		emsg.setFrom(re.getFrom());
		emsg.setTo(re.getTo());
		emsg.setSubject(re.getSubject());
		emsg.setText(re.toString());
		logger.info("Sending receipt to "+re.getTo() +" ["+re.getSubject()+"]");
		
		// Reconfigure first so as to pick up any changes to settingsDao...
		// Could be better to do with a listener?
		reconfigureMailSender();
		mailSender.send(emsg);
	}

	private void reconfigureMailSender() {
		if (mailSender instanceof JavaMailSenderImpl) {
			((JavaMailSenderImpl) mailSender).setHost(settingsDao.getSmtpHost());
			((JavaMailSenderImpl) mailSender).setPort(settingsDao.getSmtpPort());
			logger.info("Reconfiguring as "+settingsDao.getSmtpHost() + " -> "+settingsDao.getSmtpPort());
		}
	}

	private String now() {
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		return dateFormat.format(date);
	}

	private String createChecksumReceipt(String name, String id) {
		File dataDir = new File(uploadDir.getAbsolutePath() + "/" + dataPath);
		ReceiptGenerator rgen = new ReceiptGenerator(dataDir, taskExecutor);
		if (rgen.process()) {
			return rgen.getReport();
		} else {
			return "Report creation failed\n";
		}
	}

	@Autowired
	public void setMailSender(MailSender m) {
		this.mailSender = m;
		reconfigureMailSender();
	}

	@Autowired
	public void setTaskExecutor(TaskExecutor t) {
		this.taskExecutor = t;
	}

	@Autowired
	public void setUploadCompleteQueue(UploadCompleteQueue q) {
		this.uploadCompleteQueue = q;
	}
	
	@Autowired
	public void setSettingsDao(ISettingsDao settingsDao) {
		this.settingsDao = settingsDao;
	}

}
