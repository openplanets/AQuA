/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is BEAM Web Deposit.
 *
 * The Initial Developer of the Original Code is
 * Peter Cliff [pete@pixelatedpete.co.uk].
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package uk.ac.ox.bodleian.beam.deposit.postprocessing;

import java.io.File;
import java.util.Stack;

import org.springframework.core.task.TaskExecutor;

public class ReceiptGenerator implements IMD5ThreadListener {
	private TaskExecutor taskExec;
	private File dataRoot;
	private Stack<File> fileStack;
	
	private int fileCount;
	private int filesSent;
	private int filesBack;
	
	private StringBuilder repBuf;
	
	public ReceiptGenerator(File dir, TaskExecutor te) {
		this.dataRoot = dir;
		this.taskExec = te;
		this.repBuf = new StringBuilder();
		this.fileStack = new Stack<File>();
		this.fileCount = 0;
		this.filesSent = 0;
		this.filesBack = 0;
	}
	
	public boolean process() {
		fillFileStack(dataRoot);
		fileCount = fileStack.size();
		
		repBuf.append("File count: "+fileCount+"\n");
		
		while(!fileStack.empty()) {
			File currentFile = fileStack.pop();
			MD5Thread md5thread = new MD5Thread(currentFile);
			md5thread.addListener(this);
			taskExec.execute(md5thread);
			filesSent++;
		}
		
		// wait for all the files to return from taskExec
		while (filesBack != fileCount) {
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				//TODO anything?
			}
		}
		
		return true;
	}

	private void fillFileStack(File current) {
		if (current.isDirectory()) {
			File[] ls = current.listFiles();
			for (File f : ls) {
				fillFileStack(f);
			}
		} else {
			fileStack.push(current);
		}
	}

	@Override
	public void threadComplete(File file, String md5) {
		String fPath = file.getAbsolutePath();
		// remove the upload directory from the file path reported to the user...
		fPath = fPath.replace(dataRoot.getAbsolutePath(), "");
		repBuf.append(fPath+"\n["+md5+"]\n");
		filesBack++;
	}
	
	public String getReport() {
		return repBuf.toString();
	}
}
